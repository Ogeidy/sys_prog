======
# PL1:
======
EX09:   PROC  OPTIONS  ( MAIN );
    DCL A   BIT  ( 5 )  INIT  ( ‘101’B );
    DCL B   DEC  FIXED;
    B = A;
END  EX09;  


============
# Assembler:
============
EX09    START   0           #НАЧАЛО ПРОГРАММЫ#
        BALR    RBASE, 0        - Загрузить регистр базы             
        USING   *, RBASE        - Назначить регистр базой  
                            
                                #Приведение типов#
                                Смена типа A B'101'->F(101)

								#Скопировать в регистр и произвести сдвиг без использования маски
        LH      RRAB, A         -   загрузили в регистр значение переменной А (с. 47)
        LA      RWRK, 16        -   загрузили в регистр число 16(с. 150)
        SH      RWRK, CLA       -   вычли из 16 значение переменной CLA(с. 62)
        SRL     RRAB, 0(RWRK)   -   арифметический сдвиг вправо на 13 (16-CLA)(с. 75)
                                                                        
        CVD     RRAB, BUF       - Смена типа     F(101)->P(5)  (с. 95)
        
        ----------------------------------------------------------------
        MVC     B(3), BUF+5     - перемещение байтов из BUF в B  (с. 163)
        ----------------------------------------------------------------
        LA      RADD, BUF       - загрузка адреса BUF в регистр RADD
        MVC     B(3), 5(RADD)   - перемещение
        ----------------------------------------------------------------
          
        BCR     15, 14          - выход из программы                                                              


                            #ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ#
A       DC      BL.16'101'      - Переменная типа B (двоичная текстовая строка) с действительной длинной в 16 бит; имеет вид '1010 0000 0000 0000'
FLA     DC      F'5'            - Максимальная длинна для созданной переменной, FLA - FixLength var A
CLA     DC      F'3'            - Текущая длинна, занятая символами, CLA - CurrentLength var A

B       DS      PL3             - Переменная типа P (3Бт - 6тетрад) (десятичная с фиксированной точкой),
                                  конечная точка преобразования 8Бт 16 тетрад (деф 6 Бт ) в асс 1Бт

        DS      0F              - 'хитрая' конструкция для осуществления выравнивания, перемещает указатель памяти в состояние кратное 8 (16?)
BUF     DC      PL8'0'          - Переменная буффера, 8Бт - 16 тетрад

RBASE   EQU     15              - объявление регистра RBASE
RRAB    EQU     5               - объявление регистра RRAB
RADD    EQU     4               - объявление регистра RADD
RWRK    EQU     3               - объявление регистра RWRK

END     EX09             #КОНЕЦ ПРОГРАММЫ#

##----------------- Our Last Variant --------------------------

EX09    START   0          
        BALR    RBASE, 0                   
        USING   *, RBASE       
                    
        LH      RRAB, A         -   загрузили в регистр значение переменной А (с. 47)

        SRL     RRAB, 13        -   арифметический сдвиг вправо на 13 (16-CLA)(с.75) 
        CVD     RRAB, BUF       -   Смена типа     F(101)->P(5)  (с. 95)
        LA      RADD, BUF       -   загрузка адреса BUF в регистр RADD
        MVC     B(3), 5(RADD)   -   перемещение
          
        BCR     15, 14     

A       DC      BL.16'101'      
B       DC      PL3'0'             
        DS      0F            
BUF     DC      PL8'0'        
RBASE   EQU     15              
RRAB    EQU     5              
RADD    EQU     4               

END     EX09           

##----------------- The decision of last years --------------------------

EX09    START 	0            Начало программы      		                              
		BALR	RBASE,0      Загрузить базовый регистр                              
		USING	*,RBASE      Назначить базовый регистр

		L 		RRAB,NULL 			 Очистить регистр
		IC 		RRAB,A      		 Загрузить битовую строку                                  
		SRL 	RRAB,5				 Сдвинуть битовую строку                                  
		CVD 	RRAB,TEMPDEC 	     Перевести в десятичные               
		ZAP 	B,TEMPDEC    		 Обнулить и сложить  

		BCR   15,14       	 		 Выход из программы

A 		DC 	BL5'101'			Определить переменную
B 		DC 	PL3'0'      		Определить переменную
		DS    0F           		Задать выравнивание                                 
TEMPDEC DC PL8'0'       		Определить переменную
NULL 	DC 	F'0'				Определить переменную

RBASE	EQU   15           		Назначить регистр                                                                                         
RRAB	EQU   5            		Назначить регистр  

END 	EX09         		Конец программы

##-------------------------------------------------------------------------        
        
            
        
================
# Some comments:
================

22s - machine's format command
BALR    '\x05' , 2 , FRR
BCR     '\x07' , 2 , FRR
    
LH      '\x48' , 4 , FRX
LA      '\x41' , 4 , FRX
CVD     '\x4E' , 4 , FRX
SRL     '\x88' , 4 , FRS
MVC     '\xD2' , 8 , FSS
N       54  RX
BAL     45  RX

8Бт - 64бит - двойное слово
Про строку:
    строка + управляющий блок (максимальная длина, фактическая длина)
    Для чего вообще нужны строки:
        (можно булевые операции, сравнивать, конкатенировать)
        (используется для комбинаторных преобразований)
    два вида строк:
        -битовая
        -символьная(байтовая) (не один бит, а байт для хранения кода 
            символов, нельзя булевые операции)
    
На данной архитектуре адресация - байтовая!!!

По наставлению преподавателя можно изменить заданную матиссу с 5 на 16 бит
5 -> 16 

BL0.16 -> BL16 - также можно немного изменить синтаксис объявления типов

На данной архитектуре регистры - 4 байта !!

Приведение типов:
    CVD рег, память
    
    для этого неоходимо исползовать
    буферную паямять длиной 8 байт выровненный адрес кратный 4

    кратность объявления
       |
    DS 0F - выходит на границу выравненную 4м
    buf dc PL8'0'

